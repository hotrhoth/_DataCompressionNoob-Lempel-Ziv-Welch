It's unusual for a file to become larger after compression, as compression algorithms like LZW typically reduce the size of the data. However, there are several potential reasons why your out.lzw file might be larger than the original in.txt file:

1. Small File Sizes:
LZW (and other compression algorithms) often perform best on larger files. For very small files (like your in.txt and nin.txt, which are only 36 bytes), the overhead of storing the compressed data (such as dictionary information, code size, and the initial dictionary) might outweigh any potential savings from compression.
In the case of very small files, the "compressed" output may include extra data for the compression algorithm’s dictionary or other metadata that doesn’t result in a smaller file size.
2. LZW Compression Algorithm Overhead:
LZW uses a dictionary to map sequences of characters to codes. Initially, the dictionary starts with basic single-character entries, and as it finds repeated patterns, it adds more complex entries.
For small data, the dictionary might not grow much, and in some cases, the dictionary and the codebook overhead can result in a larger file than the input.
3. Compression Settings or Code Implementation:
The code for compression might have specific settings that don't optimize well for small files. For instance, the dictionary size (defined as dms in your code) might be too large for small datasets, and it may result in inefficient compression.
4. File Header and Metadata:
Depending on how the compression is implemented, it might be adding metadata, headers, or additional fields to the compressed file, which might increase its size temporarily.
5. Uncompressed Data Length in the Code:
Ensure that your decompression and compression routines are correctly implemented. If there's any issue in how the compression codes are written or read, the resulting file may end up being larger than expected.
Possible Solutions:
Test with Larger Files: Try compressing a larger text file. You'll likely see better compression ratios.
Review Dictionary Initialization: Consider adjusting the dictionary size or algorithm to handle small files more efficiently. It may help to experiment with different sizes for your dms value.
Debug the Compression Code: Ensure that the compression algorithm isn’t writing unnecessary data into the file, especially for small input sizes.
Would you like help optimizing the algorithm or testing with larger files?